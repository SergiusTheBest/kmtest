name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Header-only validation across platforms
  header-validation:
    name: Header validation on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure CMake
      run: cmake -B build -DKMTEST_BUILD_SAMPLES=OFF
      
    - name: Build
      run: cmake --build build

  # Windows specific builds (kernel mode samples require WDK)
  windows-build:
    name: Windows Build ${{ matrix.platform }}-${{ matrix.configuration }}
    runs-on: windows-2019
    
    strategy:
      fail-fast: false
      matrix:
        platform: [x86, x64]
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup Windows Driver Kit
      shell: cmd
      run: |
        echo "Note: This CI validates the project structure and MSBuild setup."
        echo "Actual kernel driver compilation requires WDK installation on target machine."
        echo "The samples are designed for kernel-mode testing and require specialized environment."
        
    - name: Validate project structure
      shell: powershell
      run: |
        $platform = if ("${{ matrix.platform }}" -eq "x86") { "Win32" } else { "${{ matrix.platform }}" }
        Write-Output "Would build: Configuration=${{ matrix.configuration }}, Platform=$platform"
        
        # Validate solution file exists and is readable
        if (Test-Path "samples\Samples.sln") {
          Write-Output "✓ Solution file found"
        } else {
          Write-Error "✗ Solution file not found"
          exit 1
        }
        
        # Validate project file exists
        if (Test-Path "samples\CalcTest\CalcTest.vcxproj") {
          Write-Output "✓ Project file found" 
        } else {
          Write-Error "✗ Project file not found"
          exit 1
        }
        
        Write-Output "✓ Project structure validation passed"